#!/usr/bin/perl
use strict;
use warnings;
use Fcntl qw(SEEK_SET SEEK_END);
use POSIX qw(strftime);
use Data::Dumper;
use FindBin;
use Getopt::Long;
use IO::Pipe;
use lib "$FindBin::Bin/lib";
use IpBan;
use IpBan::Config;
use Log;

my $AUTHFILE_READ_FREQUENCY = 4; # seconds

my $conf = my $log = my $debug = 0;
GetOptions(
    help     => \&usage,
    "conf=s" => \$conf,
    "log=s"  => \$log,
    "debug+" => \$debug,
) or die usage();

my $ipc = IpBan::Config->new($conf, $log, $debug);
my @Services = $ipc->parse();

my $Log = Log->open(logfile=>$ipc->logfile(), flushlog=>1);

END {
    $Log->close() if $Log;
}


# Signal handling
$SIG{INT}  = \&killhandler;
$SIG{TERM} = \&killhandler;
$SIG{HUP}  = \&huphandler;
sub killhandler {
    $Log->info("Terminating at user request - $!");
    die;
}
sub huphandler {
    $Log->info("Caught -HUP, reloading config..");
    $Log->info("config NOT IMPLEMENTED YET");
}


#
# Vars

my $ipban = IpBan->new($Log);

my %pos;
while (1) {
    for my $s (@Services) {
        # What we're doing here is:
        # 1. %pos is copied to the child as it is at this very moment - empty on first run, updated after that
        # 2. Create PIPE to communicate new $pos from child to parent
        # 3. Update %pos in parent to new $pos

        my $name = $s->getname(); # service name
        my $p = IO::Pipe->new();

        my $child = fork();
        unless (defined $child) {
            my $err = $!;
            $Log->crit("Could not fork '$name' service: $err");
            die $err;
        }

        if ($child == 0) {
            # child
            $p->writer();

            my $authlog = $s->getauthlog();
            my $inode = (stat $authlog)[1];

            open AUTHLOG, '<', $authlog or die "Cannot open '$authlog', $!";

            unless ($pos{$name}) {
                # first run
                # report current $pos to parent
                seek AUTHLOG, 0, SEEK_END or die "Cannot SEEK_END '$authlog', $!";
                my $pos = tell AUTHLOG;

                print $p "pos:$pos\n";
                print $p "inode:$inode\n";
                goto EXIT;
            }

            if ($inode != $pos{$name}{inode}) {
                # file has changed (eg: logrotate)
                # start reading from the top
                $pos{$name}{pos} = 0;
            }

            # read from last known $pos
            seek AUTHLOG, $pos{$name}{pos}, SEEK_SET or die "Cannot SEEK_SET '$authlog', $!";
            my @logchunk = <AUTHLOG>;
            #my @logchunk = __get_logchunk();
            # update $pos
            my $pos = tell AUTHLOG;
            close AUTHLOG;
            # report new $pos to parent
            print $p "pos:$pos\n";

            # if any logfile lines are found process them here
            # 1. Service gives ipv4, ipv6, matches
            # 2. IpBan bans/unbanes
            if (@logchunk) {
                my $authsearch = $s->getauthlogsearch();

                my %attempt;
                for my $logline (@logchunk) {
                    # filter by daemon name if given
                    if ($authsearch->{daemon}) {
                        my $rgxdaemon = $authsearch->{daemon};
                        next unless $logline =~ $rgxdaemon;
                    }

                    for my $match (keys %{$authsearch->{match}}) {
                        if ($logline =~ /$match/) {
                            for my $ipver ($s->getipver()) {
                                # in case ipver is not defined
                                # within authsearch
                                if ($authsearch->{match}{$match}{$ipver}) {
                                    my $rgxip = $authsearch->{match}{$match}{$ipver};
                                    my ($ip) = $logline =~ $rgxip;

                                    $attempt{$ipver}{$ip}++;
                                }
                            }
                        }
                    }
                }

                for my $ipver (keys %attempt) {
                    for my $ip (keys %{$attempt{$ipver}}) {
                        print $p "${ipver}:${ip}:$attempt{$ipver}{$ip}\n";
                    }
                }
            }

            EXIT:
            exit;
        }

        # parent
        $p->reader();
        while (my $line = <$p>) {
            chomp $line;

            # key, val, count
            my ($k, $v, $c) = split /:/, $line;
            
            # auth file read details
            if ($k eq 'pos' || $k eq 'inode') {
                $pos{$name}{$k} = $v;
                next;
            }

            # ingest auth fails
            $ipban->ingest4($v, $c, $s->getid()) if $k eq 'ip4';
            $ipban->ingest6($v, $c, $s->getid()) if $k eq 'ip6';
        }

        # ban/unban
        $ipban->enforce($s);
    }

    sleep $AUTHFILE_READ_FREQUENCY;
}

sub __get_logchunk {
    return (
'Nov 20 21:23:01 loubi sshd[21004]: pam_unix(sshd:auth): check pass; user unknown',
'Nov 20 21:23:01 loubi sshd[21004]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=88.125.223.23',
'Nov 20 21:23:02 loubi sshd[21004]: Failed password for invalid user king from 88.125.223.23 port 58928 ssh2',
'Nov 20 21:23:03 loubi sshd[21004]: Received disconnect from 88.125.223.23 port 58928:11: Bye Bye [preauth]',
'Nov 20 21:23:03 loubi sshd[21004]: Disconnected from 88.125.223.23 port 58928 [preauth]',
'Nov 20 21:23:13 loubi sshd[21012]: Invalid user sansforensics from 91.121.221.131 port 37443',
'Nov 20 21:23:13 loubi sshd[21012]: input_userauth_request: invalid user sansforensics [preauth]',
'Nov 20 21:23:13 loubi sshd[21012]: pam_unix(sshd:auth): check pass; user unknown',
'Nov 20 21:23:13 loubi sshd[21012]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=91.121.221.131',
'Nov 20 21:23:15 loubi sshd[21012]: Failed password for invalid user sansforensics from 91.121.221.131 port 37443 ssh2',
'Nov 20 21:23:15 loubi sshd[21012]: Received disconnect from 91.121.221.131 port 37443:11: Bye Bye [preauth]',
'Nov 20 21:23:15 loubi sshd[21012]: Disconnected from 91.121.221.131 port 37443 [preauth]',
'Nov 20 21:23:18 loubi sshd[21015]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=116.31.116.48  user=root',
'Nov 20 21:23:20 loubi sshd[21015]: Failed password for root from 116.31.116.48 port 17459 ssh2',
'Nov 20 21:23:22 loubi sshd[21015]: Failed password for root from 116.31.116.48 port 17459 ssh2',
'Nov 20 21:23:25 loubi sshx[21015]: Failed password for root from 116.31.116.48 port 17459 ssh2',
'Nov 20 21:23:22 loubi sshx[21015]: Failed password for root from 116.31.116.48 port 17459 ssh2',
'Nov 20 21:23:25 loubi sshd[21015]: Failed password for root from 116.31.116.48 port 17459 ssh2',
'Nov 20 21:23:25 loubi sshd[21015]: Received disconnect from 116.31.116.48 port 17459:11:  [preauth]',
'Nov 20 21:23:25 loubi sshd[21015]: Disconnected from 116.31.116.48 port 17459 [preauth]',
'Nov 20 21:23:25 loubi sshd[21015]: PAM 2 more authentication failures; logname= uid=0 euid=0 tty=ssh ruser= rhost=116.31.116.48  user=root',
'Nov 20 21:23:38 loubi sshd[21019]: Invalid user rene from 186.193.178.254 port 53840',
'Nov 20 21:23:38 loubi sshd[21019]: input_userauth_request: invalid user rene [preauth]',
'Nov 20 21:23:38 loubi sshd[21019]: pam_unix(sshd:auth): check pass; user unknown',
'Nov 20 21:23:38 loubi sshd[21019]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=186.193.178.254',
'Nov 20 21:23:41 loubi sshd[21019]: Failed password for invalid user rene from 186.193.178.254 port 53840 ssh2',
'Nov 20 21:23:41 loubi sshd[21019]: Received disconnect from 186.193.178.254 port 53840:11: Bye Bye [preauth]',
'Nov 20 21:23:41 loubi sshd[21019]: Disconnected from 186.193.178.254 port 53840 [preauth]',
'Nov 20 21:24:10 loubi sshd[21023]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=116.31.116.48  user=root',
'Nov 20 21:24:12 loubi sshd[21023]: Failed password for root from 116.31.116.48 port 16332 ssh2',
'Nov 20 21:24:15 loubi sshd[21023]: Failed password for root from 116.31.116.48 port 16332 ssh2',
'Nov 20 21:24:18 loubi sshd[21023]: Failed password for root from 116.31.116.48 port 16332 ssh2',
'Nov 20 21:24:18 loubi sshd[21023]: Received disconnect from 116.31.116.48 port 16332:11:  [preauth]',
'Nov 20 21:24:18 loubi sshd[21023]: Disconnected from 116.31.116.48 port 16332 [preauth]',
'Nov 20 21:24:18 loubi sshd[21023]: PAM 2 more authentication failures; logname= uid=0 euid=0 tty=ssh ruser= rhost=116.31.116.48  user=root',
'Nov 20 21:25:15 loubi sshd[21029]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=116.31.116.48  user=root',
'Nov 20 21:25:17 loubi sshd[21031]: Invalid user judge from 117.242.186.243 port 46084',
'Nov 20 21:25:17 loubi sshd[21031]: input_userauth_request: invalid user judge [preauth]',
'Nov 20 21:25:17 loubi sshd[21031]: pam_unix(sshd:auth): check pass; user unknown',
'Nov 20 21:25:17 loubi sshd[21031]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=117.242.186.243',
'Nov 20 21:25:15 loubi sshn[21029]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=116.31.116.48  user=root',
'Nov 20 21:25:17 loubi sshn[21031]: Invalid user judge from 117.242.186.243 port 46084',
'Nov 20 21:25:17 loubi sshn[21031]: input_userauth_request: invalid user judge [preauth]',
'Nov 20 21:25:17 loubi sshn[21031]: pam_unix(sshd:auth): check pass; user unknown',
'Nov 20 21:25:17 loubi sshn[21031]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=117.242.186.243',
'Nov 20 21:25:18 loubi sshd[21029]: Failed password for root from 116.31.116.48 port 11159 ssh2',
'Nov 20 21:25:18 loubi sshd[21031]: Failed password for invalid user judge from 117.242.186.243 port 46084 ssh2',
'Nov 20 21:25:18 loubi sshd[21031]: Received disconnect from 117.242.186.243 port 46084:11: Bye Bye [preauth]',
'Nov 20 21:25:18 loubi sshd[21031]: Disconnected from 117.242.186.243 port 46084 [preauth]',
'Nov 20 21:25:20 loubi sshd[21029]: Failed password for root from 116.31.116.48 port 11159 ssh2',
'Nov 20 21:25:22 loubi sshd[21029]: Failed password for root from 116.31.116.48 port 11159 ssh2',
'Nov 20 21:25:22 loubi sshd[21029]: Received disconnect from 116.31.116.48 port 11159:11:  [preauth]',
'Nov 20 21:25:22 loubi sshd[21029]: Disconnected from 116.31.116.48 port 11159 [preauth]',
'Nov 20 21:25:22 loubi sshd[21029]: PAM 2 more authentication failures; logname= uid=0 euid=0 tty=ssh ruser= rhost=116.31.116.48  user=root',
'Nov 20 21:25:32 loubi sshd[21035]: Invalid user saurabh from 46.101.130.130 port 52847',
'Nov 20 21:25:32 loubi sshd[21035]: input_userauth_request: invalid user saurabh [preauth]',
'Nov 20 21:25:32 loubi sshd[21035]: pam_unix(sshd:auth): check pass; user unknown',
'Nov 20 21:25:32 loubi sshd[21035]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=46.101.130.130',
'Nov 20 21:25:34 loubi sshd[21035]: Failed password for invalid user saurabh from 46.101.130.130 port 52847 ssh2',
'Nov 20 21:25:35 loubi sshd[21035]: Received disconnect from 46.101.130.130 port 52847:11: Bye Bye [preauth]',
'Nov 20 21:25:35 loubi sshd[21035]: Disconnected from 46.101.130.130 port 52847 [preauth]',
'Nov 20 21:25:51 loubi sshd[21038]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=116.31.116.48  user=root',
'Nov 20 21:25:53 loubi sshd[21038]: Failed password for root from 116.31.116.48 port 46465 ssh2',
'Nov 20 21:25:55 loubi sshd[21038]: Failed password for root from 116.31.116.48 port 46465 ssh2',
'Nov 20 21:25:57 loubi sshd[21038]: Failed password for root from 116.31.116.48 port 46465 ssh2',
'Nov 20 21:25:57 loubi sshd[21038]: Received disconnect from 116.31.116.48 port 46465:11:  [preauth]',
'Nov 20 21:25:57 loubi sshd[21038]: Disconnected from 116.31.116.48 port 46465 [preauth]',
'Nov 20 21:25:57 loubi sshd[21038]: PAM 2 more authentication failures; logname= uid=0 euid=0 tty=ssh ruser= rhost=116.31.116.48  user=root',
'Nov 20 21:26:40 loubi sshd[21044]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=116.31.116.48  user=root',
'Nov 20 21:26:42 loubi sshd[21044]: Failed password for root from 116.31.116.48 port 33606 ssh2',
'Nov 20 21:26:45 loubi sshd[21044]: Failed password for root from 116.31.116.48 port 33606 ssh2',
'Nov 20 21:26:47 loubi sshd[21044]: Failed password for root from 116.31.116.48 port 33606 ssh2',
'Nov 20 21:26:48 loubi sshd[21044]: Received disconnect from 116.31.116.48 port 33606:11:  [preauth]',
'Nov 20 21:26:48 loubi sshd[21044]: Disconnected from 116.31.116.48 port 33606 [preauth]',
'Nov 20 21:26:48 loubi sshd[21044]: PAM 2 more authentication failures; logname= uid=0 euid=0 tty=ssh ruser= rhost=116.31.116.48  user=root',
'Nov 20 21:27:31 loubi sshd[21047]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=116.31.116.48  user=root',
'Nov 20 21:27:33 loubi sshd[21047]: Failed password for root from 116.31.116.48 port 23026 ssh2',
'Nov 20 21:27:35 loubi sshd[21047]: Failed password for root from 116.31.116.48 port 23026 ssh2',
'Nov 20 21:27:37 loubi sshd[21047]: Failed password for root from 116.31.116.48 port 23026 ssh2',
'Nov 20 21:27:37 loubi sshd[21047]: Received disconnect from 116.31.116.48 port 23026:11:  [preauth]',
'Nov 20 21:27:37 loubi sshd[21047]: Disconnected from 116.31.116.48 port 23026 [preauth]',
'Nov 20 21:27:37 loubi sshd[21047]: PAM 2 more authentication failures; logname= uid=0 euid=0 tty=ssh ruser= rhost=116.31.116.48  user=root',
'Nov 20 21:27:49 loubi sshd[21049]: Connection closed by 85.92.206.77 port 36760 [preauth]',
'Nov 20 21:27:58 loubi sshd[21051]: Invalid user ghani from 180.76.247.202 port 36066',
'Nov 20 21:27:58 loubi sshd[21051]: Invalid user ghani from 180.76.247.202 port 36066',
'Nov 20 21:27:58 loubi sshd[21051]: input_userauth_request: invalid user ghani [preauth]',
'Nov 20 21:27:58 loubi sshd[21051]: pam_unix(sshd:auth): check pass; user unknown',
'Nov 20 21:27:58 loubi sshd[21051]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=180.76.247.202',
'Nov 20 21:28:00 loubi sshd[21051]: Failed password for invalid user ghani from 180.76.247.202 port 36066 ssh2',
'Nov 20 21:28:00 loubi sshd[21051]: Failed password for invalid user ghani from 180.76.247.202 port 36066 ssh2',
'Nov 20 21:28:00 loubi sshd[21051]: Received disconnect from 180.76.247.202 port 36066:11: Bye Bye [preauth]',
'Nov 20 21:28:00 loubi sshd[21051]: Disconnected from 180.76.247.202 port 36066 [preauth]',
'Nov 20 21:28:19 loubi sshd[21053]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=116.31.116.48  user=root',
'Nov 20 21:28:21 loubi sshd[21053]: Failed password for root from 116.31.116.48 port 11011 ssh2',
'Nov 20 21:28:23 loubi sshd[21053]: Failed password for root from 116.31.116.48 port 11011 ssh2',
'Nov 20 21:28:25 loubi sshd[21053]: Failed password for root from 116.31.116.48 port 11011 ssh2',
'Nov 20 21:28:25 loubi sshd[21053]: Received disconnect from 116.31.116.48 port 11011:11:  [preauth]',
'Nov 20 21:28:25 loubi sshd[21053]: Disconnected from 116.31.116.48 port 11011 [preauth]',
'Nov 20 21:28:25 loubi sshd[21053]: PAM 2 more authentication failures; logname= uid=0 euid=0 tty=ssh ruser= rhost=116.31.116.48  user=root',
'Nov 20 21:29:08 loubi sshd[21060]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=116.31.116.48  user=root',
'Nov 20 21:29:10 loubi sshd[21060]: Failed password for root from 116.31.116.48 port 51410 ssh2',
'Nov 20 21:29:12 loubi sshd[21060]: Failed password for root from 116.31.116.48 port 51410 ssh2',
'Nov 20 21:29:15 loubi sshd[21060]: Failed password for root from 116.31.116.48 port 51410 ssh2',
'Nov 20 21:29:15 loubi sshd[21060]: Received disconnect from 116.31.116.48 port 51410:11:  [preauth]',
'Nov 20 21:29:15 loubi sshd[21060]: Disconnected from 116.31.116.48 port 51410 [preauth]',
'Nov 20 21:29:15 loubi sshd[21060]: PAM 2 more authentication failures; logname= uid=0 euid=0 tty=ssh ruser= rhost=116.31.116.48  user=root',
'Nov 20 21:29:58 loubi sshd[21062]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=116.31.116.48  user=root',
'Nov 20 21:30:01 loubi sshd[21062]: Failed password for root from 116.31.116.48 port 44609 ssh2',
'Nov 20 21:30:03 loubi sshd[21062]: Failed password for root from 116.31.116.48 port 44609 ssh2',
'Nov 20 21:30:06 loubi sshd[21062]: Failed password for root from 116.31.116.48 port 44609 ssh2',
'Nov 20 21:30:06 loubi sshd[21062]: Received disconnect from 116.31.116.48 port 44609:11:  [preauth]',
'Nov 20 21:30:06 loubi sshd[21062]: Disconnected from 116.31.116.48 port 44609 [preauth]',
'Nov 20 21:30:06 loubi sshd[21062]: PAM 2 more authentication failures; logname= uid=0 euid=0 tty=ssh ruser= rhost=116.31.116.48  user=root',
);
}


#
# Subs

=head

# see bottom of this file for sample logs
sub process_logfile_chunk {
    my @lines = @_;

    my $now = time;
    for my $line (@lines) {
        next unless $line =~ /sshd\[/;

        if ($line =~ /Failed password/) {
            my ($ip) = $line =~ /from (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) port /;
            $ip .= "/32";

            $LOGIN{$ip}{count}++;
            $LOGIN{$ip}{countstart} = $now
                unless defined $LOGIN{$ip}{countstart};
        }
        #
        # add more (possible) bans here
        #
    }

#print Dumper \%LOGIN;
    my $l = join "\n", map { " =# $_ / $LOGIN{$_}{count} / $LOGIN{$_}{countstart}" } keys %LOGIN;
    $Log->info("Current logins status:\n$l") if $l;

    # ban/unban
    for my $ip (keys %LOGIN) {
        my $countstart = $LOGIN{$ip}{countstart};

        if (($now - $countstart) >= $THRESHOLD{timespan}) {
            if ($LOGIN{$ip}{count} < $THRESHOLD{maxattempt}) {
                # if not crossed threshold for logins
                # just reset our counters and move on..
                delete $LOGIN{$ip};
                next;
            }

            # BAN!

            $ipban->ban($ip, 'tcp', 22);
            #my $ban = "iptables -I INPUT 1 -p tcp -s $ip -d 0/0 --dport 22 -j REJECT -m comment --comment 'limit SSH access'";
            #my $banres = join "", qx($ban 2>&1);
            #$Log->info("Banning IP $ip ($ban)");
            #$Log->warn($banres) if $banres;
            #$BAN{$ip} = $now;
            #delete $LOGIN{$ip};
        }
    }

    # UN-BAN!
    for my $ip (keys %BAN) {
        if (($now - $BAN{$ip}) >= $THRESHOLD{timeban}) {
            my $unban = "iptables -D INPUT -p tcp -s $ip -d 0/0 --dport 22 -j REJECT";
            my $unbanres = join "", qx($unban 2>&1);
            $Log->info("Un-banning IP $ip ($unban)");
            $Log->warn($unbanres) if $unbanres;
            delete $BAN{$ip};
        }
    }

#print Dumper \%BAN;
    my $b = join "\n", map { " =X $_ / $BAN{$_}" } keys %BAN;
    $Log->info("Current banned:\n$b") if $b;
}

=cut

sub usage {
    my $exit = 0;
    if (my $err = shift) {
        print "\nERROR: $err\n";
        $exit = 1;
    }

    (my $self = $0) =~ s|^.*/||;

    print <<"EOF";

USAGE: $self <option> [ <value> ] ..
OPTIONS:
    -h|--help           show this info
    -c|--conf <file>    use this config file
    -l|--log  <file>    use this log file
    -d|--debug          increase log level

EOF
    exit $exit;
}
