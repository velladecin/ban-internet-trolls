#!/usr/bin/perl
use strict;
use warnings;
use Fcntl qw(SEEK_SET SEEK_END);
use Data::Dumper;
use FindBin;
use Getopt::Long;
use IO::Pipe;
use lib "$FindBin::Bin/lib";
use IpBan;
use IpBan::Config;
use Log;

my $AUTHFILE_READ_FREQUENCY = 5; # seconds

my $conf = my $log = my $debug = 0;
GetOptions(
    help     => \&usage,
    "conf=s" => \$conf,
    "log=s"  => \$log,
    "debug+" => \$debug,
) or die usage();

my ($Ipban, @Services) = __init($conf, $log, $debug);

END {
    # close log file handle
    $Ipban->lclose() if $Ipban;
}

# Signal handling
$SIG{INT}  = \&killhandler;
$SIG{TERM} = \&killhandler;
$SIG{HUP}  = \&huphandler;
sub killhandler {
    $Ipban->linfo("Stopping daemon and exiting.. ($!)");
    die "Caught signal - $!";
}
sub huphandler {
    $Ipban->linfo("Caught -HUP, reloading config..");
    ($Ipban, @Services) = __init();
}


#
# Main

my %pos;
while (1) {
    # reconcile on each run (is this too much?)
    $Ipban->reconcile();

    for my $s (@Services) {
        # What we're doing here is:
        # 1. %pos is copied to the child as it is at this very moment - empty on first run, updated after that
        # 2. Create PIPE to communicate new $pos from child to parent
        # 3. Update %pos in parent to new $pos

        my $name = $s->getname(); # service name
        my $p = IO::Pipe->new();

        my $child = fork();
        unless (defined $child) {
            my $err = $!;
            $Ipban->lcrit("Could not fork '$name' service: $err");
            die $err;
        }

        if ($child == 0) {
            $Ipban->ldebug("Running child: $name/$$");

            # child
            $p->writer();

            my $authlog = $s->getauthlog();
            my $inode = (stat $authlog)[1];

            $Ipban->ldebug("Opening file $authlog");
            open AUTHLOG, '<', $authlog or die "Cannot open '$authlog', $!";

            unless ($pos{$name}) {
                # first run
                # report current $pos to parent
                seek AUTHLOG, 0, SEEK_END or die "Cannot SEEK_END '$authlog', $!";
                my $pos = tell AUTHLOG;

                $Ipban->linfo("First run reading $authlog from: position $pos, inode $inode");

                print $p "pos:$pos\n";
                print $p "inode:$inode\n";
                goto EXIT;
            }

            if ($inode != $pos{$name}{inode}) {
                # file has changed (eg: logrotate), start reading from the top
                $Ipban->lwarn("$authlog: Inode has changed (logrotate?), opening new file");
                $pos{$name}{pos} = 0;

                # communicate new inode to parent - doh!
                print $p "inode:$inode\n";
            }

            # read from last known $pos
            $Ipban->ldebug("Reading $authlog from: position $pos{$name}{pos}");
            seek AUTHLOG, $pos{$name}{pos}, SEEK_SET or die "Cannot SEEK_SET '$authlog', $!";
            my @logchunk = <AUTHLOG>;
            # update $pos
            my $pos = tell AUTHLOG;
            close AUTHLOG;

            # report new $pos to parent
            $Ipban->ldebug("Reporting new $authlog pos $pos to parent");
            print $p "pos:$pos\n";

            # if any logfile lines are found process them here
            # 1. Service gives ipv4, ipv6, matches
            # 2. IpBan bans/unbanes
            if (@logchunk) {
                my $authsearch = $s->getauthlogsearch();

                my $linecount = 0;
                my %attempt;
                for my $logline (@logchunk) {
                    $linecount++;
                    # filter by daemon name if given
                    if ($authsearch->{daemon}) {
                        my $rgxdaemon = $authsearch->{daemon};
                        next unless $logline =~ $rgxdaemon;
                    }

                    for my $match (keys %{$authsearch->{match}}) {
                        if ($logline =~ /$match/) {
                            for my $ipver ($s->getipver()) {
                                # in case ipver is not defined
                                # within authsearch
                                if ($authsearch->{match}{$match}{$ipver}) {
                                    my $rgxip = $authsearch->{match}{$match}{$ipver};
                                    my ($ip) = $logline =~ $rgxip;

                                    $attempt{$ipver}{$ip}++;
                                }
                            }
                        }
                    }
                }
                $Ipban->linfo("Have processed $linecount lines");

                for my $ipver (keys %attempt) {
                    for my $ip (keys %{$attempt{$ipver}}) {
                        print $p "${ipver}:${ip}:$attempt{$ipver}{$ip}\n";
                    }
                }
            }

            EXIT:
            exit;
        }

        # parent
        $p->reader();
        while (my $line = <$p>) {
            chomp $line;

            # key, val, count
            my ($k, $v, $c) = split /:/, $line;
            
            # auth file read details
            if ($k eq 'pos' || $k eq 'inode') {
                if ($k eq 'pos') {
                    if ($pos{$name}{$k} == $v) {
                        $Ipban->ldebug("Read pos has not moved from last time: $v");
                    }
                }
                $pos{$name}{$k} = $v;
                next;
            }

            # exclude whitelisted IPs
            if (grep /^${v}$/, $s->getwhitelist()) {
                $Ipban->linfo("Ignoring whitelisted IP: $v");
                next;
            }

            # ingest failed auth attempts
            $Ipban->ingest4($v, $c, $s->getid()) if $k eq 'ip4';
            $Ipban->ingest6($v, $c, $s->getid()) if $k eq 'ip6';
        }

        # ban/unban
        $Ipban->enforce($s);
    }

    for (1..@Services) {
        my $pid = wait();
        $Ipban->ldebug("Reaping child: $pid");
    }

    sleep $AUTHFILE_READ_FREQUENCY;
}



#
# Subs

sub __init {
    my ($conf, $log, $debug) = @_;

    my $ipc = IpBan::Config->new($conf, $log, $debug);
    my @services = $ipc->parse();

    my $logger = Log->open(logfile=>$ipc->logfile(), debug=>$debug, flushlog=>1);

    # start/reload info logging
    if (@services) {
        $logger->info("===================");
        $logger->info("Starting daemon..");
        $logger->info("Configured services");
        $logger->info("===================");
        for my $s (@services) {
            $logger->info( sprintf 'Service: %s, Proto: %s, Port: %d', $s->getname(), $s->getproto(), $s->getport() );
            $logger->info( sprintf 'Banfilter: %s, Bantime: %ds, Bantime-grace: %ds', $s->getbanfilter(), $s->getbantime(), $s->getbantimegrace() );
            $logger->info("Whitelist: ", join ', ', $s->getwhitelist());
            $logger->info("Blacklist: ", join ', ', $s->getblacklist());
        }
    }

    my $ipban = IpBan->new($logger);

    return $ipban, @services;
}

sub usage {
    my $exit = 0;
    if (my $err = shift) {
        print "\nERROR: $err\n";
        $exit = 1;
    }

    (my $self = $0) =~ s|^.*/||;

    print <<"EOF";

USAGE: $self <option> [ <value> ] ..
OPTIONS:
    -h|--help           show this info
    -c|--conf <file>    use this config file
    -l|--log  <file>    use this log file
    -d|--debug          increase log level

EOF
    exit $exit;
}
